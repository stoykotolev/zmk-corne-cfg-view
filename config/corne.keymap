/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        kph: kph {
            compatible = "zmk,behavior-hold-tap";
            label = "KPH";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            quick-tap-ms = <20>;
            flavor = "tap-preferred";
        };

        kpmo: kpmo {
            compatible = "zmk,behavior-hold-tap";
            label = "KPMO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <20>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&trans  &kp Q                &kp W            &kp E                &kp R              &kp T            &kp Y    &kp U               &kp I                 &kp O             &kp P                         &trans
&trans  &kph LEFT_CONTROL A  &kph LEFT_ALT S  &kph LEFT_COMMAND D  &kph LEFT_SHIFT F  &kp G            &kp H    &kph RIGHT_SHIFT J  &kph RIGHT_COMMAND K  &kph RIGHT_ALT L  &kph RIGHT_CONTROL SEMICOLON  &trans
&trans  &kp Z                &kp X            &kp C                &kp V              &kp B            &kp N    &kp M               &kp COMMA             &kp DOT           &kp FSLH                      &trans
                                              &trans               &kpmo 2 BACKSPACE  &kpmo 1 SPACE    &kp RET  &kpmo 3 ESC         &trans
            >;
        };

        Number {
            bindings = <
&trans  &bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans    &kp UNDERSCORE  &kp N7  &kp N8  &kp N9  &kp MINUS  &trans
&trans  &trans          &trans        &kp TAB       &trans  &trans    &kp FSLH        &kp N4  &kp N5  &kp N6  &kp PLUS   &trans
&trans  &trans          &trans        &trans        &trans  &trans    &kp ASTERISK    &kp N1  &kp N2  &kp N3  &kp EQUAL  &trans
                                      &trans        &trans  &trans    &trans          &trans  &kp N0
            >;
        };

        Symbols {
            bindings = <
&trans  &kp GRAVE        &kp CARET    &kp DOLLAR  &kp PIPE       &trans    &trans          &kp LEFT_BRACKET      &kp SQT        &kp DOUBLE_QUOTES  &kp RIGHT_BRACKET      &trans
&trans  &kp EXCLAMATION  &kp MINUS    &kp PLUS    &kp EQUAL      &trans    &kp UNDERSCORE  &kp LEFT_PARENTHESIS  &kp ASTERISK   &kp PERCENT        &kp RIGHT_PARENTHESIS  &trans
&trans  &kp TILDE        &kp AT_SIGN  &kp HASH    &kp BACKSLASH  &trans    &kp AMPERSAND   &kp LEFT_BRACE        &kp LESS_THAN  &kp GREATER_THAN   &kp RIGHT_BRACE        &trans
                                      &trans      &trans         &trans    &trans          &trans                &trans
            >;
        };

        Nav {
            bindings = <
&trans  &kp LS(LG(NUMBER_3))  &kp LS(LC(LG(NUMBER_3)))  &kp LS(LG(LC(NUMBER_4)))  &kp LS(LG(NUMBER_4))  &trans    &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(UP)  &kp LG(RIGHT)  &trans  &trans
&trans  &kp LS(LG(N5))        &kp C_VOLUME_DOWN         &kp K_MUTE                &kp C_VOL_UP          &trans    &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      &trans  &trans
&trans  &trans                &trans                    &trans                    &trans                &trans    &kp LA(LEFT)  &kp LA(DOWN)  &kp LA(UP)  &kp LA(RIGHT)  &trans  &trans
                                                        &trans                    &trans                &trans    &trans        &trans        &trans
            >;
        };
    };
};
